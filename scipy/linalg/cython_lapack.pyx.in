"""
LAPACK functions for Cython
===========================

Usable from Cython via::

    cimport scipy.linalg.cython_lapack

Raw function pointers (Fortran-style pointer arguments):

- cgbsv_f
- cgbtrf_f
- cgbtrs_f
- cgebal_f
- cgees_f
- cgeev_f
- cgegv_f
- cgehrd_f
- cgelss_f
- cgeqp3_f
- cgeqrf_f
- cgerqf_f
- cgesdd_f
- cgesv_f
- cgetrf_f
- cgetri_f
- cgetrs_f
- cgges_f
- cggev_f
- chbevd_f
- chbevx_f
- cheev_f
- cheevd_f
- cheevr_f
- chegv_f
- chegvd_f
- chegvx_f
- claswp_f
- clauum_f
- cpbsv_f
- cpbtrf_f
- cpbtrs_f
- cposv_f
- cpotrf_f
- cpotri_f
- cpotrs_f
- ctrsyl_f
- ctrtri_f
- ctrtrs_f
- cungqr_f
- cungrq_f
- cunmqr_f
- dgbsv_f
- dgbtrf_f
- dgbtrs_f
- dgebal_f
- dgees_f
- dgeev_f
- dgegv_f
- dgehrd_f
- dgelss_f
- dgeqp3_f
- dgeqrf_f
- dgerqf_f
- dgesdd_f
- dgesv_f
- dgetrf_f
- dgetri_f
- dgetrs_f
- dgges_f
- dggev_f
- dlamch_f
- dlaswp_f
- dlauum_f
- dorgqr_f
- dorgrq_f
- dormqr_f
- dpbsv_f
- dpbtrf_f
- dpbtrs_f
- dposv_f
- dpotrf_f
- dpotri_f
- dpotrs_f
- dsbev_f
- dsbevd_f
- dsbevx_f
- dsyev_f
- dsyevd_f
- dsyevr_f
- dsygv_f
- dsygvd_f
- dsygvx_f
- dtrsyl_f
- dtrtri_f
- dtrtrs_f
- sgbsv_f
- sgbtrf_f
- sgbtrs_f
- sgebal_f
- sgees_f
- sgeev_f
- sgegv_f
- sgehrd_f
- sgelss_f
- sgeqp3_f
- sgeqrf_f
- sgerqf_f
- sgesdd_f
- sgesv_f
- sgetrf_f
- sgetri_f
- sgetrs_f
- sgges_f
- sggev_f
- slamch_f
- slaswp_f
- slauum_f
- sorgqr_f
- sorgrq_f
- sormqr_f
- spbsv_f
- spbtrf_f
- spbtrs_f
- sposv_f
- spotrf_f
- spotri_f
- spotrs_f
- ssbev_f
- ssbevd_f
- ssbevx_f
- ssyev_f
- ssyevd_f
- ssyevr_f
- ssygv_f
- ssygvd_f
- ssygvx_f
- strsyl_f
- strtri_f
- strtrs_f
- zgbsv_f
- zgbtrf_f
- zgbtrs_f
- zgebal_f
- zgees_f
- zgeev_f
- zgegv_f
- zgehrd_f
- zgelss_f
- zgeqp3_f
- zgeqrf_f
- zgerqf_f
- zgesdd_f
- zgesv_f
- zgetrf_f
- zgetri_f
- zgetrs_f
- zgges_f
- zggev_f
- zhbevd_f
- zhbevx_f
- zheev_f
- zheevd_f
- zheevr_f
- zhegv_f
- zhegvd_f
- zhegvx_f
- zlaswp_f
- zlauum_f
- zpbsv_f
- zpbtrf_f
- zpbtrs_f
- zposv_f
- zpotrf_f
- zpotri_f
- zpotrs_f
- ztrsyl_f
- ztrtri_f
- ztrtrs_f
- zungqr_f
- zungrq_f
- zunmqr_f

"""

cdef extern from "fortran_defs.h":
    pass

# Use the subroutine wrappers for the
# functions with specific return values.
ctypedef d wdlamch_t(d *out, char *cmach) nogil
ctypedef s wslamch_t(s *out, char *cmach) nogil

{{py:

def wrap_fortran_function(signature):
    import re
    m = re.match(r'\s*([a-z]+)\s+([a-z0-9]+)\((.*)\)\s*$', signature)
    assert m
    ret_type, name, arg_sig = m.groups()
    args = re.findall(r'\*([a-z]+)', arg_sig)
    arg_list = ",".join(args)
    wname = name + "wrapper"
    return """
cdef extern w{name}_t _fortran_{name} "F_FUNC({wname},{WNAME})"
cdef {ret_type} _wrap_{name}({arg_sig}) nogil:
    cdef {ret_type} out
    _fortran_{name}(&out, {arg_list})
    return out
cdef {name}_t *{name}_f = &_wrap_{name}
""".format(name=name, ret_type=ret_type, arg_sig=arg_sig, arg_list=arg_list,
           wname=wname, WNAME=wname.upper())

def wrap_fortran_subroutine(name):
    return """
cdef extern {name}_t _fortran_{name} "F_FUNC({name},{NAME})"
cdef {name}_t *{name}_f = &_fortran_{name}
""".format(name=name, NAME=name.upper())

WRAPPED_FUNCTIONS = [
    'd dlamch(char *cmach)',
    's slamch(char *cmach)',
]

WRAPPED_SUBROUTINES = [
    'cgbsv',
    'cgbtrf',
    'cgbtrs',
    'cgebal',
    'cgees',
    'cgeev',
    'cgegv',
    'cgehrd',
    'cgelss',
    'cgeqp3',
    'cgeqrf',
    'cgerqf',
    'cgesdd',
    'cgesv',
    'cgetrf',
    'cgetri',
    'cgetrs',
    'cgges',
    'cggev',
    'chbevd',
    'chbevx',
    'cheev',
    'cheevd',
    'cheevr',
    'chegv',
    'chegvd',
    'chegvx',
    'claswp',
    'clauum',
    'cpbsv',
    'cpbtrf',
    'cpbtrs',
    'cposv',
    'cpotrf',
    'cpotri',
    'cpotrs',
    'ctrsyl',
    'ctrtri',
    'ctrtrs',
    'cungqr',
    'cungrq',
    'cunmqr',
    'dgbsv',
    'dgbtrf',
    'dgbtrs',
    'dgebal',
    'dgees',
    'dgeev',
    'dgegv',
    'dgehrd',
    'dgelss',
    'dgeqp3',
    'dgeqrf',
    'dgerqf',
    'dgesdd',
    'dgesv',
    'dgetrf',
    'dgetri',
    'dgetrs',
    'dgges',
    'dggev',
    'dlaswp',
    'dlauum',
    'dorgqr',
    'dorgrq',
    'dormqr',
    'dpbsv',
    'dpbtrf',
    'dpbtrs',
    'dposv',
    'dpotrf',
    'dpotri',
    'dpotrs',
    'dsbev',
    'dsbevd',
    'dsbevx',
    'dsyev',
    'dsyevd',
    'dsyevr',
    'dsygv',
    'dsygvd',
    'dsygvx',
    'dtrsyl',
    'dtrtri',
    'dtrtrs',
    'sgbsv',
    'sgbtrf',
    'sgbtrs',
    'sgebal',
    'sgees',
    'sgeev',
    'sgegv',
    'sgehrd',
    'sgelss',
    'sgeqp3',
    'sgeqrf',
    'sgerqf',
    'sgesdd',
    'sgesv',
    'sgetrf',
    'sgetri',
    'sgetrs',
    'sgges',
    'sggev',
    'slaswp',
    'slauum',
    'sorgqr',
    'sorgrq',
    'sormqr',
    'spbsv',
    'spbtrf',
    'spbtrs',
    'sposv',
    'spotrf',
    'spotri',
    'spotrs',
    'ssbev',
    'ssbevd',
    'ssbevx',
    'ssyev',
    'ssyevd',
    'ssyevr',
    'ssygv',
    'ssygvd',
    'ssygvx',
    'strsyl',
    'strtri',
    'strtrs',
    'zgbsv',
    'zgbtrf',
    'zgbtrs',
    'zgebal',
    'zgees',
    'zgeev',
    'zgegv',
    'zgehrd',
    'zgelss',
    'zgeqp3',
    'zgeqrf',
    'zgerqf',
    'zgesdd',
    'zgesv',
    'zgetrf',
    'zgetri',
    'zgetrs',
    'zgges',
    'zggev',
    'zhbevd',
    'zhbevx',
    'zheev',
    'zheevd',
    'zheevr',
    'zhegv',
    'zhegvd',
    'zhegvx',
    'zlaswp',
    'zlauum',
    'zpbsv',
    'zpbtrf',
    'zpbtrs',
    'zposv',
    'zpotrf',
    'zpotri',
    'zpotrs',
    'ztrsyl',
    'ztrtri',
    'ztrtrs',
    'zungqr',
    'zungrq',
    'zunmqr',
]

}}

{{for sig in WRAPPED_FUNCTIONS}}
{{wrap_fortran_function(sig)}}
{{endfor}}

{{for name in WRAPPED_SUBROUTINES}}
{{wrap_fortran_subroutine(name)}}
{{endfor}}


# Python functions used for testing calls to Fortran functions.

def _py_dlamch(cmach):
    # This conversion is necessary to handle Python 3 strings.
    cmach_bytes = bytes(cmach)
    # Now that it is a bytes representation, a non-temporary variable
    # must be passed as a part of the function call.
    cdef char* cmach_char = cmach_bytes
    return dlamch_f(cmach_char)

def _py_slamch(cmach):
    # This conversion is necessary to handle Python 3 strings.
    cmach_bytes = bytes(cmach)
    # Now that it is a bytes representation, a non-temporary variable
    # must be passed as a part of the function call.
    cdef char* cmach_char = cmach_bytes
    return slamch_f(cmach_char)
